// –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª JavaScript - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

console.log('üöÄ LogiBase App Loading...');

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function initializeApp() {
    console.log('‚úÖ Initializing LogiBase...');
    
    // –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initializeLanguageSwitcher();
    initializeNavigation();
    initializeLoginSystem();
    setupCalculatorInteractions();
    initializeVehicleSelection();
    initializePriceCalculation();
    
    showNotification('Willkommen bei LogiBase! Berechnen Sie jetzt Ihren Transportpreis.', 'info');
    
    console.log('üéâ LogiBase Ready!');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
function initializeLanguageSwitcher() {
    document.querySelectorAll('.lang-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const lang = this.getAttribute('data-lang');
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            document.querySelectorAll('.lang-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —è–∑—ã–∫–æ–≤—ã–µ –±–ª–æ–∫–∏
            document.querySelectorAll('.lang-de').forEach(el => {
                el.style.display = lang === 'de' ? 'block' : 'none';
            });
            document.querySelectorAll('.lang-en').forEach(el => {
                el.style.display = lang === 'en' ? 'block' : 'none';
            });
        });
    });
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
function initializeNavigation() {
    // –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    document.querySelectorAll('.nav-link').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            
            if (targetElement) {
                targetElement.scrollIntoView({ 
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });

    // –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –¥–ª—è CTA –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.cta-button').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            
            if (targetElement) {
                targetElement.scrollIntoView({ 
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });
}

// –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏–Ω–∞
function initializeLoginSystem() {
    const users = {
        'Michael': { password: '123', name: 'Michael', role: 'admin' },
        'kunde': { password: 'kunde123', name: 'Max Mustermann', role: 'customer' }
    };

    // –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function showUserInfo(username) {
        document.getElementById('userName').textContent = users[username].name;
        document.getElementById('userInfo').style.display = 'flex';
        document.getElementById('loginForm').style.display = 'none';
    }

    // –°–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function hideUserInfo() {
        document.getElementById('userInfo').style.display = 'none';
        document.getElementById('loginForm').style.display = 'flex';
        document.getElementById('username').value = '';
        document.getElementById('password').value = '';
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞
    document.getElementById('loginForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        const loginBtn = this.querySelector('.login-btn');
        
        if (!username.trim() || !password.trim()) {
            showNotification('Bitte geben Sie Benutzername und Passwort ein', 'error');
            return;
        }
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        const originalText = loginBtn.textContent;
        loginBtn.textContent = 'Wird geladen...';
        loginBtn.disabled = true;
        
        // –ò–º–∏—Ç–∞—Ü–∏—è API –≤—ã–∑–æ–≤–∞
        setTimeout(() => {
            if (users[username] && users[username].password === password) {
                showUserInfo(username);
                localStorage.setItem('loggedInUser', username);
                showNotification('Erfolgreich angemeldet als ' + users[username].name, 'success');
            } else {
                showNotification('Ung√ºltiger Benutzername oder Passwort', 'error');
            }
            
            // –°–±—Ä–æ—Å –∫–Ω–æ–ø–∫–∏
            loginBtn.textContent = originalText;
            loginBtn.disabled = false;
        }, 1000);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∞—É—Ç–∞
    document.getElementById('logoutBtn').addEventListener('click', function() {
        hideUserInfo();
        localStorage.removeItem('loggedInUser');
        showNotification('Erfolgreich abgemeldet', 'success');
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
    const loggedInUser = localStorage.getItem('loggedInUser');
    if (loggedInUser) {
        showUserInfo(loggedInUser);
    }
}

// –ë–∞–∑–æ–≤—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
function setupCalculatorInteractions() {
    // –ü–æ–∫–∞–∑ —Å–µ–∫—Ü–∏–π –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö
    const fromLocation = document.getElementById('from-location');
    const toLocation = document.getElementById('to-location');
    
    [fromLocation, toLocation].forEach(input => {
        input.addEventListener('input', function() {
            if (fromLocation.value.trim() && toLocation.value.trim()) {
                showSection('date-time-section');
            }
        });
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç
    setupDateValidation();

    // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä—É–∑–∞
    initializeCargoTypeSelection();

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ª–ª–µ—Ç–∞–º–∏
    initializePalletManagement();

    // –°—Ç–µ–∫–∏–Ω–≥ (—à—Ç–∞–±–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
    initializeStackingToggles();

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
    setupFormSubmission();
}

// –ü–æ–∫–∞–∑ —Å–µ–∫—Ü–∏–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
function showSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (section && !section.classList.contains('visible')) {
        section.classList.add('visible');
        
        // –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –∫ —Å–µ–∫—Ü–∏–∏
        setTimeout(() => {
            section.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'center',
                inline: 'nearest'
            });
        }, 400);
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
function setupDateValidation() {
    const now = new Date();
    const nowString = now.toISOString().slice(0, 16);
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞—Ç
    document.getElementById('loading-date').min = nowString;
    document.getElementById('unloading-date').min = nowString;
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const loadingDate = new Date(now.getTime() + 24 * 60 * 60 * 1000);
    const loadingDateString = loadingDate.toISOString().slice(0, 16);
    
    const unloadingDate = new Date(loadingDate.getTime() + 2 * 60 * 60 * 1000);
    const unloadingDateString = unloadingDate.toISOString().slice(0, 16);
    
    document.getElementById('loading-date').value = loadingDateString;
    document.getElementById('unloading-date').value = unloadingDateString;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –≤—ã–≥—Ä—É–∑–∫–∏
    document.getElementById('loading-date').addEventListener('change', function() {
        const loadingDate = new Date(this.value);
        const unloadingInput = document.getElementById('unloading-date');
        
        unloadingInput.min = this.value;
        
        const unloadingDate = new Date(unloadingInput.value);
        if (unloadingDate < loadingDate) {
            const newUnloadingDate = new Date(loadingDate.getTime() + 2 * 60 * 60 * 1000);
            unloadingInput.value = newUnloadingDate.toISOString().slice(0, 16);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–µ–∫—Ü–∏—é
        if (this.value) {
            showSection('cargo-type-section');
        }
    });
}

// –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä—É–∑–∞
function initializeCargoTypeSelection() {
    document.querySelectorAll('.cargo-type-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.cargo-type-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            const type = this.getAttribute('data-type');
            
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –ø–∞–ª–ª–µ—Ç
            document.getElementById('individual-pallets-section').classList.remove('visible');
            document.getElementById('standard-pallets-section').classList.remove('visible');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
            if (type === 'individual') {
                showSection('individual-pallets-section');
                addFirstPallet();
            } else {
                showSection('standard-pallets-section');
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            setTimeout(() => {
                showSection('vehicle-section');
            }, 500);
        });
    });
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ª–ª–µ—Ç–∞–º–∏
let palletCounter = 0;

function initializePalletManagement() {
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞–ª–ª–µ—Ç—ã
    document.getElementById('add-pallet-btn').addEventListener('click', function() {
        addIndividualPallet(true);
    });

    // –í–≤–æ–¥—ã –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞–ª–ª–µ—Ç
    document.getElementById('pallet-count')?.addEventListener('input', calculateStandardStacking);
    document.getElementById('pallet-weight')?.addEventListener('input', calculateStandardStacking);

    // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–∞–ª–ª–µ—Ç—ã
    document.querySelectorAll('.pallet-type-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.pallet-type-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            calculateStandardStacking();
        });
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –ø–∞–ª–ª–µ—Ç—ã
function addFirstPallet() {
    addIndividualPallet(false);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –ø–∞–ª–ª–µ—Ç—ã
function addIndividualPallet(empty = false) {
    palletCounter++;
    const container = document.getElementById('individual-pallets-container');
    const palletItem = document.createElement('div');
    palletItem.className = 'pallet-item';
    palletItem.setAttribute('data-pallet-id', palletCounter);
    
    const defaultValue = empty ? '' : (palletCounter === 1 ? '100' : '');
    const weightValue = empty ? '' : (palletCounter === 1 ? '500' : '');
    
    palletItem.innerHTML = `
        <div class="dimension-item">
            <label class="lang-de">L√§nge (cm)</label>
            <label class="lang-en">Length (cm)</label>
            <input type="number" name="pallet-length-${palletCounter}" min="1" max="400" placeholder="120" value="${defaultValue}">
        </div>
        <div class="dimension-item">
            <label class="lang-de">Breite (cm)</label>
            <label class="lang-en">Width (cm)</label>
            <input type="number" name="pallet-width-${palletCounter}" min="1" max="400" placeholder="80" value="${defaultValue}">
        </div>
        <div class="dimension-item">
            <label class="lang-de">H√∂he (cm)</label>
            <label class="lang-en">Height (cm)</label>
            <input type="number" name="pallet-height-${palletCounter}" min="1" max="400" placeholder="100" value="${defaultValue}">
        </div>
        <div class="dimension-item">
            <label class="lang-de">Gewicht (kg)</label>
            <label class="lang-en">Weight (kg)</label>
            <input type="number" name="pallet-weight-${palletCounter}" min="1" max="5000" placeholder="500" value="${weightValue}">
        </div>
        <button type="button" class="duplicate-pallet-btn" onclick="duplicatePallet(this)" title="Palette duplizieren">
            <span>üìã</span>
        </button>
        ${palletCounter > 1 ? '<button type="button" class="remove-pallet-btn" onclick="removePallet(this)" title="Palette entfernen">√ó</button>' : 
          '<button type="button" class="remove-pallet-btn" disabled style="background: var(--accent); cursor: not-allowed;">√ó</button>'}
    `;
    
    container.appendChild(palletItem);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const inputs = palletItem.querySelectorAll('input');
    inputs.forEach(input => {
        input.addEventListener('input', function() {
            calculateStacking();
            updateVehicleSelection();
        });
    });
    
    calculateStacking();
    updateVehicleSelection();
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–∞–ª–ª–µ—Ç
function duplicatePallet(button) {
    const palletItem = button.parentElement;
    const container = document.getElementById('individual-pallets-container');
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–∞–ª–ª–µ—Ç—ã
    const inputs = palletItem.querySelectorAll('input[type="number"]');
    const currentValues = Array.from(inputs).map(input => input.value);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–ª–ª–µ—Ç—É —Å –¢–ê–ö–ò–ú–ò –ñ–ï –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const newPalletItem = document.createElement('div');
    newPalletItem.className = 'pallet-item';
    newPalletItem.setAttribute('data-pallet-id', palletCounter + 1);
    
    newPalletItem.innerHTML = `
        <div class="dimension-item">
            <label class="lang-de">L√§nge (cm)</label>
            <label class="lang-en">Length (cm)</label>
            <input type="number" name="pallet-length-${palletCounter + 1}" min="1" max="400" placeholder="120" value="${currentValues[0] || ''}">
        </div>
        <div class="dimension-item">
            <label class="lang-de">Breite (cm)</label>
            <label class="lang-en">Width (cm)</label>
            <input type="number" name="pallet-width-${palletCounter + 1}" min="1" max="400" placeholder="80" value="${currentValues[1] || ''}">
        </div>
        <div class="dimension-item">
            <label class="lang-de">H√∂he (cm)</label>
            <label class="lang-en">Height (cm)</label>
            <input type="number" name="pallet-height-${palletCounter + 1}" min="1" max="400" placeholder="100" value="${currentValues[2] || ''}">
        </div>
        <div class="dimension-item">
            <label class="lang-de">Gewicht (kg)</label>
            <label class="lang-en">Weight (kg)</label>
            <input type="number" name="pallet-weight-${palletCounter + 1}" min="1" max="5000" placeholder="500" value="${currentValues[3] || ''}">
        </div>
        <button type="button" class="duplicate-pallet-btn" onclick="duplicatePallet(this)" title="Palette duplizieren">
            <span>üìã</span>
        </button>
        <button type="button" class="remove-pallet-btn" onclick="removePallet(this)" title="Palette entfernen">√ó</button>
    `;
    
    container.appendChild(newPalletItem);
    palletCounter++;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    const newInputs = newPalletItem.querySelectorAll('input');
    newInputs.forEach(input => {
        input.addEventListener('input', function() {
            calculateStacking();
            updateVehicleSelection();
        });
    });
    
    calculateStacking();
    updateVehicleSelection();
    showNotification('‚úÖ Palette wurde dupliziert!', 'success');
}

function removePallet(button) {
    if (document.querySelectorAll('.pallet-item').length > 1) {
        button.parentElement.remove();
        calculateStacking();
        updateVehicleSelection();
        showNotification('üóëÔ∏è Palette wurde entfernt', 'info');
    }
}

// –°—Ç–µ–∫–∏–Ω–≥ (—à—Ç–∞–±–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
function initializeStackingToggles() {
    // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–∞–ª–ª–µ—Ç—ã
    document.getElementById('individual-stapelbar').addEventListener('change', function() {
        const levelsInput = document.getElementById('individual-levels-input');
        if (this.checked) {
            levelsInput.classList.add('visible');
            calculateStacking();
        } else {
            levelsInput.classList.remove('visible');
            calculateStacking();
        }
        updateVehicleSelection();
    });

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞–ª–ª–µ—Ç—ã
    document.getElementById('standard-stapelbar').addEventListener('change', function() {
        const levelsInput = document.getElementById('standard-levels-input');
        if (this.checked) {
            levelsInput.classList.add('visible');
            calculateStandardStacking();
        } else {
            levelsInput.classList.remove('visible');
            calculateStandardStacking();
        }
        updateVehicleSelection();
    });

    // –í–≤–æ–¥—ã –≤—ã—Å–æ—Ç—ã —Å—Ç–µ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
    document.getElementById('max-stack-height').addEventListener('input', function() {
        calculateStacking();
        updateVehicleSelection();
    });
    document.getElementById('standard-max-height').addEventListener('input', function() {
        calculateStandardStacking();
        updateVehicleSelection();
    });
}

// –†–∞—Å—á–µ—Ç —Å—Ç–µ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–∞–ª–ª–µ—Ç
function calculateStacking() {
    const isStapelbar = document.getElementById('individual-stapelbar').checked;
    const maxStackHeight = parseInt(document.getElementById('max-stack-height').value) || 250;
    const MAX_STACK_LEVELS = 2;
    
    const palletItems = document.querySelectorAll('.pallet-item');
    let totalWeight = 0;
    let maxPalletHeight = 0;
    let totalBasePallets = 0;
    
    // –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    palletItems.forEach(item => {
        const lengthInput = item.querySelector('input[type="number"]:nth-child(1)');
        const widthInput = item.querySelector('input[type="number"]:nth-child(2)');
        const heightInput = item.querySelector('input[type="number"]:nth-child(3)');
        const weightInput = item.querySelector('input[type="number"]:nth-child(4)');
        
        if (heightInput && heightInput.value) {
            const height = parseInt(heightInput.value) || 0;
            if (height > maxPalletHeight) maxPalletHeight = height;
        }
        if (weightInput && weightInput.value) {
            const weight = parseInt(weightInput.value) || 0;
            totalWeight += weight;
        }
        totalBasePallets++;
    });
    
    if (isStapelbar && maxPalletHeight > 0) {
        // –†–∞—Å—á–µ—Ç —Å—Ç–µ–∫–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
        const levelsPerStack = Math.min(
            MAX_STACK_LEVELS, 
            Math.floor(maxStackHeight / maxPalletHeight)
        );
        
        const effectivePallets = totalBasePallets * levelsPerStack;
        const spaceSaving = Math.round((1 - (totalBasePallets / effectivePallets)) * 100);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–µ–∫–∏—Ä–æ–≤–∞–Ω–∏–∏
        document.getElementById('effective-pallets').textContent = effectivePallets;
        document.getElementById('stack-levels').textContent = levelsPerStack;
        document.getElementById('stack-weight').textContent = (totalWeight * levelsPerStack) + ' kg';
        document.getElementById('space-saving').textContent = spaceSaving + '%';
        document.getElementById('individual-stacking-info').classList.add('visible');
        
        return {
            effectivePallets: effectivePallets,
            levels: levelsPerStack,
            totalWeight: totalWeight * levelsPerStack,
            spaceSaving: spaceSaving,
            isStacked: true,
            maxPalletHeight: maxPalletHeight
        };
    } else {
        // –°–±—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–µ–∫–∏—Ä–æ–≤–∞–Ω–∏–∏
        document.getElementById('effective-pallets').textContent = totalBasePallets;
        document.getElementById('stack-levels').textContent = 1;
        document.getElementById('stack-weight').textContent = totalWeight + ' kg';
        document.getElementById('space-saving').textContent = '0%';
        document.getElementById('individual-stacking-info').classList.remove('visible');
        
        return {
            effectivePallets: totalBasePallets,
            levels: 1,
            totalWeight: totalWeight,
            spaceSaving: 0,
            isStacked: false,
            maxPalletHeight: maxPalletHeight
        };
    }
}

// –†–∞—Å—á–µ—Ç —Å—Ç–µ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞–ª–ª–µ—Ç
function calculateStandardStacking() {
    const isStapelbar = document.getElementById('standard-stapelbar').checked;
    const maxStackHeight = parseInt(document.getElementById('standard-max-height').value) || 250;
    const palletCount = parseInt(document.getElementById('pallet-count').value) || 0;
    const palletWeight = parseInt(document.getElementById('pallet-weight').value) || 0;
    const MAX_STACK_LEVELS = 2;
    const STANDARD_PALLET_HEIGHT = 150;
    
    if (isStapelbar) {
        const levelsPerStack = Math.min(
            MAX_STACK_LEVELS, 
            Math.floor(maxStackHeight / STANDARD_PALLET_HEIGHT)
        );
        
        const effectivePallets = palletCount * levelsPerStack;
        const spaceSaving = Math.round((1 - (palletCount / effectivePallets)) * 100);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–µ–∫–∏—Ä–æ–≤–∞–Ω–∏–∏
        document.getElementById('standard-effective-pallets').textContent = effectivePallets;
        document.getElementById('standard-stack-levels').textContent = levelsPerStack;
        document.getElementById('standard-stack-weight').textContent = (palletWeight * effectivePallets) + ' kg';
        document.getElementById('standard-space-saving').textContent = spaceSaving + '%';
        document.getElementById('standard-stacking-info').classList.add('visible');
        
        return {
            effectivePallets: effectivePallets,
            levels: levelsPerStack,
            totalWeight: palletWeight * effectivePallets,
            spaceSaving: spaceSaving,
            isStacked: true,
            maxPalletHeight: STANDARD_PALLET_HEIGHT
        };
    } else {
        // –°–±—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–µ–∫–∏—Ä–æ–≤–∞–Ω–∏–∏
        document.getElementById('standard-effective-pallets').textContent = palletCount;
        document.getElementById('standard-stack-levels').textContent = 1;
        document.getElementById('standard-stack-weight').textContent = (palletWeight * palletCount) + ' kg';
        document.getElementById('standard-space-saving').textContent = '0%';
        document.getElementById('standard-stacking-info').classList.remove('visible');
        
        return {
            effectivePallets: palletCount,
            levels: 1,
            totalWeight: palletWeight * palletCount,
            spaceSaving: 0,
            isStacked: false,
            maxPalletHeight: STANDARD_PALLET_HEIGHT
        };
    }
}

// –†–∞—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–∑–µ
function calculateCargoData() {
    const cargoType = document.querySelector('.cargo-type-btn.active').getAttribute('data-type');
    let totalWeight = 0;
    let totalPallets = 0;
    let maxPalletHeight = 0;
    let palletType = null;
    let isStacked = false;
    
    if (cargoType === 'individual') {
        const stackingInfo = calculateStacking();
        totalWeight = stackingInfo.totalWeight;
        totalPallets = stackingInfo.effectivePallets;
        maxPalletHeight = stackingInfo.maxPalletHeight;
        isStacked = stackingInfo.isStacked;
    } else {
        const stackingInfo = calculateStandardStacking();
        totalWeight = stackingInfo.totalWeight;
        totalPallets = stackingInfo.effectivePallets;
        maxPalletHeight = stackingInfo.maxPalletHeight;
        palletType = document.querySelector('.pallet-type-btn.active').getAttribute('data-type');
        isStacked = stackingInfo.isStacked;
    }
    
    return {
        totalWeight,
        totalPallets,
        maxPalletHeight,
        palletType,
        isStacked
    };
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–∑–µ
function isValidCargoData(cargoData) {
    const { totalWeight, totalPallets, maxPalletHeight } = cargoData;
    
    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (totalWeight <= 0 || totalPallets <= 0 || maxPalletHeight <= 0) {
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω –ª–∏ —Ç–∏–ø –≥—Ä—É–∑–∞
    const cargoTypeBtn = document.querySelector('.cargo-type-btn.active');
    if (!cargoTypeBtn) return false;
    
    // –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞–ª–ª–µ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω –ª–∏ —Ç–∏–ø
    if (cargoTypeBtn.getAttribute('data-type') === 'standard') {
        const palletTypeBtn = document.querySelector('.pallet-type-btn.active');
        if (!palletTypeBtn) return false;
    }
    
    // –î–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
    const fromLocation = document.getElementById('from-location').value;
    const toLocation = document.getElementById('to-location').value;
    
    return fromLocation && toLocation && fromLocation.trim() && toLocation.trim();
}

// –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <span>${message}</span>
        <button onclick="this.parentElement.remove()">√ó</button>
    `;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 5000);
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function openModal(source) {
    showNotification('üìß Angebotsanfrage-Funktion wird demn√§chst implementiert', 'info');
}

function closeModal() {
    // –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–æ–≥–¥–∞ DOM –∑–∞–≥—Ä—É–∂–µ–Ω
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML onclick
window.openModal = openModal;
window.closeModal = closeModal;
window.duplicatePallet = duplicatePallet;
window.removePallet = removePallet;